{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5104/api';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor for auth (when implemented)\napi.interceptors.request.use(config => {\n  // Add auth token here when JWT is implemented\n  // const token = localStorage.getItem('authToken');\n  // if (token) {\n  //   config.headers.Authorization = `Bearer ${token}`;\n  // }\n  return config;\n});\n\n// Response interceptor for error handling\napi.interceptors.response.use(response => response, error => {\n  console.error('API Error:', error);\n  return Promise.reject(error);\n});\n\n// Employee API\nexport const employeeApi = {\n  getAll: async () => {\n    const response = await api.get('/employees');\n    return response.data;\n  },\n  getById: async id => {\n    const response = await api.get(`/employees/${id}`);\n    return response.data;\n  },\n  getBuddyGuides: async () => {\n    const response = await api.get('/employees/buddy-guides');\n    return response.data;\n  },\n  getNewcomers: async () => {\n    const response = await api.get('/employees/newcomers');\n    return response.data;\n  },\n  create: async employee => {\n    const response = await api.post('/employees', employee);\n    return response.data;\n  },\n  createBuddyProfile: async (employeeId, profile) => {\n    const response = await api.post(`/employees/${employeeId}/buddy-profile`, profile);\n    return response.data;\n  }\n};\n\n// Matching API\nexport const matchingApi = {\n  getRecommendations: async (newcomerId, maxRecommendations = 5) => {\n    const response = await api.get(`/matching/recommendations/${newcomerId}?maxRecommendations=${maxRecommendations}`);\n    return response.data;\n  },\n  getCompatibilityScore: async (buddyId, newcomerId) => {\n    const response = await api.get(`/matching/compatibility/${buddyId}/${newcomerId}`);\n    return response.data.compatibilityScore;\n  },\n  createMatch: async request => {\n    const response = await api.post('/matching/create', request);\n    return response.data;\n  },\n  acceptMatch: async (matchId, buddyId) => {\n    await api.post(`/matching/accept/${matchId}`, {\n      buddyId\n    });\n  },\n  rejectMatch: async (matchId, buddyId, reason) => {\n    await api.post(`/matching/reject/${matchId}`, {\n      buddyId,\n      reason\n    });\n  }\n};\n\n// Buddy API\nexport const buddyApi = {\n  getProfiles: async () => {\n    // This would need to be implemented in the backend\n    const response = await api.get('/buddies');\n    return response.data;\n  },\n  getProfile: async id => {\n    const response = await api.get(`/buddies/${id}`);\n    return response.data;\n  },\n  updateProfile: async (id, profile) => {\n    const response = await api.put(`/buddies/${id}`, profile);\n    return response.data;\n  }\n};\n\n// Match API\nexport const matchApi = {\n  getAll: async () => {\n    const response = await api.get('/matches');\n    return response.data;\n  },\n  getByBuddy: async buddyId => {\n    const response = await api.get(`/matches/buddy/${buddyId}`);\n    return response.data;\n  },\n  getByNewcomer: async newcomerId => {\n    const response = await api.get(`/matches/newcomer/${newcomerId}`);\n    return response.data;\n  },\n  getById: async id => {\n    const response = await api.get(`/matches/${id}`);\n    return response.data;\n  }\n};\n\n// Message API\nexport const messageApi = {\n  getByMatch: async matchId => {\n    const response = await api.get(`/messages/match/${matchId}`);\n    return response.data;\n  },\n  send: async (matchId, content, receiverId) => {\n    const response = await api.post('/messages', {\n      matchId,\n      content,\n      receiverId\n    });\n    return response.data;\n  },\n  markAsRead: async messageId => {\n    await api.put(`/messages/${messageId}/read`);\n  }\n};\n\n// Analytics API\nexport const analyticsApi = {\n  getDashboardData: async () => {\n    const response = await api.get('/analytics/dashboard');\n    return response.data;\n  },\n  getBuddyPerformance: async buddyId => {\n    const response = await api.get(`/analytics/buddy/${buddyId}/performance`);\n    return response.data;\n  },\n  getMatchingTrends: async (startDate, endDate) => {\n    const response = await api.get(`/analytics/trends?startDate=${startDate}&endDate=${endDate}`);\n    return response.data;\n  }\n};\n\n// Gamification API\nexport const gamificationApi = {\n  getLeaderboard: async (type = 'monthly') => {\n    const response = await api.get(`/gamification/leaderboard?type=${type}`);\n    return response.data;\n  },\n  getBadges: async buddyId => {\n    const response = await api.get(`/gamification/badges/${buddyId}`);\n    return response.data;\n  },\n  getAchievements: async buddyId => {\n    const response = await api.get(`/gamification/achievements/${buddyId}`);\n    return response.data;\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","response","error","console","Promise","reject","employeeApi","getAll","get","data","getById","id","getBuddyGuides","getNewcomers","employee","post","createBuddyProfile","employeeId","profile","matchingApi","getRecommendations","newcomerId","maxRecommendations","getCompatibilityScore","buddyId","compatibilityScore","createMatch","acceptMatch","matchId","rejectMatch","reason","buddyApi","getProfiles","getProfile","updateProfile","put","matchApi","getByBuddy","getByNewcomer","messageApi","getByMatch","send","content","receiverId","markAsRead","messageId","analyticsApi","getDashboardData","getBuddyPerformance","getMatchingTrends","startDate","endDate","gamificationApi","getLeaderboard","type","getBadges","getAchievements"],"sources":["C:/Users/LiubovFomicheva/source/repos/vibe-coding/BuddyMatch.Web/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\r\nimport {\r\n  Employee,\r\n  BuddyProfile,\r\n  BuddyMatch,\r\n  BuddyMatchRecommendation,\r\n  CreateEmployeeRequest,\r\n  CreateBuddyProfileRequest,\r\n  CreateMatchRequest,\r\n  Message,\r\n  AnalyticsData,\r\n} from '../types';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5104/api';\r\n\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Request interceptor for auth (when implemented)\r\napi.interceptors.request.use((config) => {\r\n  // Add auth token here when JWT is implemented\r\n  // const token = localStorage.getItem('authToken');\r\n  // if (token) {\r\n  //   config.headers.Authorization = `Bearer ${token}`;\r\n  // }\r\n  return config;\r\n});\r\n\r\n// Response interceptor for error handling\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    console.error('API Error:', error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Employee API\r\nexport const employeeApi = {\r\n  getAll: async (): Promise<Employee[]> => {\r\n    const response = await api.get('/employees');\r\n    return response.data;\r\n  },\r\n\r\n  getById: async (id: string): Promise<Employee> => {\r\n    const response = await api.get(`/employees/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  getBuddyGuides: async (): Promise<Employee[]> => {\r\n    const response = await api.get('/employees/buddy-guides');\r\n    return response.data;\r\n  },\r\n\r\n  getNewcomers: async (): Promise<Employee[]> => {\r\n    const response = await api.get('/employees/newcomers');\r\n    return response.data;\r\n  },\r\n\r\n  create: async (employee: CreateEmployeeRequest): Promise<Employee> => {\r\n    const response = await api.post('/employees', employee);\r\n    return response.data;\r\n  },\r\n\r\n  createBuddyProfile: async (\r\n    employeeId: string,\r\n    profile: CreateBuddyProfileRequest\r\n  ): Promise<BuddyProfile> => {\r\n    const response = await api.post(`/employees/${employeeId}/buddy-profile`, profile);\r\n    return response.data;\r\n  },\r\n};\r\n\r\n// Matching API\r\nexport const matchingApi = {\r\n  getRecommendations: async (\r\n    newcomerId: string,\r\n    maxRecommendations: number = 5\r\n  ): Promise<BuddyMatchRecommendation[]> => {\r\n    const response = await api.get(\r\n      `/matching/recommendations/${newcomerId}?maxRecommendations=${maxRecommendations}`\r\n    );\r\n    return response.data;\r\n  },\r\n\r\n  getCompatibilityScore: async (buddyId: string, newcomerId: string): Promise<number> => {\r\n    const response = await api.get(`/matching/compatibility/${buddyId}/${newcomerId}`);\r\n    return response.data.compatibilityScore;\r\n  },\r\n\r\n  createMatch: async (request: CreateMatchRequest): Promise<{ matchId: string; compatibilityScore: number }> => {\r\n    const response = await api.post('/matching/create', request);\r\n    return response.data;\r\n  },\r\n\r\n  acceptMatch: async (matchId: string, buddyId: string): Promise<void> => {\r\n    await api.post(`/matching/accept/${matchId}`, { buddyId });\r\n  },\r\n\r\n  rejectMatch: async (matchId: string, buddyId: string, reason?: string): Promise<void> => {\r\n    await api.post(`/matching/reject/${matchId}`, { buddyId, reason });\r\n  },\r\n};\r\n\r\n// Buddy API\r\nexport const buddyApi = {\r\n  getProfiles: async (): Promise<BuddyProfile[]> => {\r\n    // This would need to be implemented in the backend\r\n    const response = await api.get('/buddies');\r\n    return response.data;\r\n  },\r\n\r\n  getProfile: async (id: string): Promise<BuddyProfile> => {\r\n    const response = await api.get(`/buddies/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  updateProfile: async (id: string, profile: Partial<BuddyProfile>): Promise<BuddyProfile> => {\r\n    const response = await api.put(`/buddies/${id}`, profile);\r\n    return response.data;\r\n  },\r\n};\r\n\r\n// Match API\r\nexport const matchApi = {\r\n  getAll: async (): Promise<BuddyMatch[]> => {\r\n    const response = await api.get('/matches');\r\n    return response.data;\r\n  },\r\n\r\n  getByBuddy: async (buddyId: string): Promise<BuddyMatch[]> => {\r\n    const response = await api.get(`/matches/buddy/${buddyId}`);\r\n    return response.data;\r\n  },\r\n\r\n  getByNewcomer: async (newcomerId: string): Promise<BuddyMatch[]> => {\r\n    const response = await api.get(`/matches/newcomer/${newcomerId}`);\r\n    return response.data;\r\n  },\r\n\r\n  getById: async (id: string): Promise<BuddyMatch> => {\r\n    const response = await api.get(`/matches/${id}`);\r\n    return response.data;\r\n  },\r\n};\r\n\r\n// Message API\r\nexport const messageApi = {\r\n  getByMatch: async (matchId: string): Promise<Message[]> => {\r\n    const response = await api.get(`/messages/match/${matchId}`);\r\n    return response.data;\r\n  },\r\n\r\n  send: async (matchId: string, content: string, receiverId: string): Promise<Message> => {\r\n    const response = await api.post('/messages', {\r\n      matchId,\r\n      content,\r\n      receiverId,\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  markAsRead: async (messageId: string): Promise<void> => {\r\n    await api.put(`/messages/${messageId}/read`);\r\n  },\r\n};\r\n\r\n// Analytics API\r\nexport const analyticsApi = {\r\n  getDashboardData: async (): Promise<AnalyticsData> => {\r\n    const response = await api.get('/analytics/dashboard');\r\n    return response.data;\r\n  },\r\n\r\n  getBuddyPerformance: async (buddyId: string): Promise<any> => {\r\n    const response = await api.get(`/analytics/buddy/${buddyId}/performance`);\r\n    return response.data;\r\n  },\r\n\r\n  getMatchingTrends: async (startDate: string, endDate: string): Promise<any> => {\r\n    const response = await api.get(\r\n      `/analytics/trends?startDate=${startDate}&endDate=${endDate}`\r\n    );\r\n    return response.data;\r\n  },\r\n};\r\n\r\n// Gamification API\r\nexport const gamificationApi = {\r\n  getLeaderboard: async (type: 'monthly' | 'allTime' = 'monthly'): Promise<any[]> => {\r\n    const response = await api.get(`/gamification/leaderboard?type=${type}`);\r\n    return response.data;\r\n  },\r\n\r\n  getBadges: async (buddyId: string): Promise<any[]> => {\r\n    const response = await api.get(`/gamification/badges/${buddyId}`);\r\n    return response.data;\r\n  },\r\n\r\n  getAchievements: async (buddyId: string): Promise<any[]> => {\r\n    const response = await api.get(`/gamification/achievements/${buddyId}`);\r\n    return response.data;\r\n  },\r\n};\r\n\r\nexport default api;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"// Employee Types\n\nexport let EmployeeRole = /*#__PURE__*/function (EmployeeRole) {\n  EmployeeRole[EmployeeRole[\"HR\"] = 1] = \"HR\";\n  EmployeeRole[EmployeeRole[\"Employee\"] = 2] = \"Employee\";\n  return EmployeeRole;\n}({});\n\n// Buddy Profile Types\nexport let BuddyAvailability = /*#__PURE__*/function (BuddyAvailability) {\n  BuddyAvailability[BuddyAvailability[\"Low\"] = 1] = \"Low\";\n  BuddyAvailability[BuddyAvailability[\"Medium\"] = 2] = \"Medium\";\n  BuddyAvailability[BuddyAvailability[\"High\"] = 3] = \"High\";\n  BuddyAvailability[BuddyAvailability[\"VeryHigh\"] = 4] = \"VeryHigh\";\n  return BuddyAvailability;\n}({});\n\n// Match Types\n\nexport let MatchStatus = /*#__PURE__*/function (MatchStatus) {\n  MatchStatus[MatchStatus[\"Pending\"] = 1] = \"Pending\";\n  MatchStatus[MatchStatus[\"Active\"] = 2] = \"Active\";\n  MatchStatus[MatchStatus[\"Rejected\"] = 3] = \"Rejected\";\n  MatchStatus[MatchStatus[\"Completed\"] = 4] = \"Completed\";\n  MatchStatus[MatchStatus[\"Expired\"] = 5] = \"Expired\";\n  return MatchStatus;\n}({});\n\n// Recommendation Types\n\n// Gamification Types\n\nexport let BuddyLevel = /*#__PURE__*/function (BuddyLevel) {\n  BuddyLevel[BuddyLevel[\"Bronze\"] = 1] = \"Bronze\";\n  BuddyLevel[BuddyLevel[\"Silver\"] = 2] = \"Silver\";\n  BuddyLevel[BuddyLevel[\"Gold\"] = 3] = \"Gold\";\n  BuddyLevel[BuddyLevel[\"Platinum\"] = 4] = \"Platinum\";\n  BuddyLevel[BuddyLevel[\"Diamond\"] = 5] = \"Diamond\";\n  return BuddyLevel;\n}({});\nexport let BadgeCategory = /*#__PURE__*/function (BadgeCategory) {\n  BadgeCategory[BadgeCategory[\"Mentorship\"] = 1] = \"Mentorship\";\n  BadgeCategory[BadgeCategory[\"Expertise\"] = 2] = \"Expertise\";\n  BadgeCategory[BadgeCategory[\"Special\"] = 3] = \"Special\";\n  BadgeCategory[BadgeCategory[\"Achievement\"] = 4] = \"Achievement\";\n  return BadgeCategory;\n}({});\nexport let AchievementType = /*#__PURE__*/function (AchievementType) {\n  AchievementType[AchievementType[\"ProfileComplete\"] = 1] = \"ProfileComplete\";\n  AchievementType[AchievementType[\"MatchAccept\"] = 2] = \"MatchAccept\";\n  AchievementType[AchievementType[\"FirstWeekCheckIn\"] = 3] = \"FirstWeekCheckIn\";\n  AchievementType[AchievementType[\"MonthlyFeedback\"] = 4] = \"MonthlyFeedback\";\n  AchievementType[AchievementType[\"FiveStarRating\"] = 5] = \"FiveStarRating\";\n  AchievementType[AchievementType[\"ThreeMonthRelationship\"] = 6] = \"ThreeMonthRelationship\";\n  AchievementType[AchievementType[\"SuccessfulCompletion\"] = 7] = \"SuccessfulCompletion\";\n  AchievementType[AchievementType[\"CrossTeamMentoring\"] = 8] = \"CrossTeamMentoring\";\n  AchievementType[AchievementType[\"HighPriorityMatch\"] = 9] = \"HighPriorityMatch\";\n  AchievementType[AchievementType[\"PerfectMonth\"] = 10] = \"PerfectMonth\";\n  return AchievementType;\n}({});\n\n// Message Types\n\nexport let MessageType = /*#__PURE__*/function (MessageType) {\n  MessageType[MessageType[\"Text\"] = 1] = \"Text\";\n  MessageType[MessageType[\"MeetingScheduled\"] = 2] = \"MeetingScheduled\";\n  MessageType[MessageType[\"SystemNotification\"] = 3] = \"SystemNotification\";\n  return MessageType;\n}({});\n\n// Feedback Types\n\n// API Request Types\n\n// UI State Types\n\n// Analytics Types\n\n// Buddy Profile Request Types","map":{"version":3,"names":["EmployeeRole","BuddyAvailability","MatchStatus","BuddyLevel","BadgeCategory","AchievementType","MessageType"],"sources":["C:/Users/LiubovFomicheva/source/repos/vibe-coding/BuddyMatch.Web/src/types/index.ts"],"sourcesContent":["// Employee Types\r\nexport interface Employee {\r\n  id: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  email: string;\r\n  title: string;\r\n  unit: string;\r\n  team: string;\r\n  location: string;\r\n  startDate: string;\r\n  role: EmployeeRole;\r\n  techStack: string;\r\n  languages: string;\r\n  interests: string;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n  isBuddyGuide: boolean;\r\n  isNewcomer: boolean;\r\n  fullName: string;\r\n  buddyProfile?: BuddyProfile;\r\n}\r\n\r\nexport enum EmployeeRole {\r\n  HR = 1,\r\n  Employee = 2\r\n}\r\n\r\n// Buddy Profile Types\r\nexport enum BuddyAvailability {\r\n  Low = 1,\r\n  Medium = 2,\r\n  High = 3,\r\n  VeryHigh = 4\r\n}\r\n\r\nexport interface BuddyProfile {\r\n  id: string;\r\n  employeeId: string;\r\n  isActive: boolean;\r\n  maxActiveBuddies: number;\r\n  bio: string;\r\n  specialties: string;\r\n  availability: BuddyAvailability;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n  currentActiveBuddies: number;\r\n  canAcceptNewBuddy: boolean;\r\n  availabilityScore: number;\r\n  employee: Employee;\r\n  gameProfile?: BuddyGameProfile;\r\n}\r\n\r\n// Match Types\r\nexport interface BuddyMatch {\r\n  id: string;\r\n  buddyId: string;\r\n  newcomerId: string;\r\n  createdByHRId: string;\r\n  status: MatchStatus;\r\n  compatibilityScore: number;\r\n  notes: string;\r\n  createdAt: string;\r\n  acceptedAt?: string;\r\n  rejectedAt?: string;\r\n  completedAt?: string;\r\n  updatedAt: string;\r\n  buddy: Employee;\r\n  newcomer: Employee;\r\n  createdByHR: Employee;\r\n}\r\n\r\nexport enum MatchStatus {\r\n  Pending = 1,\r\n  Active = 2,\r\n  Rejected = 3,\r\n  Completed = 4,\r\n  Expired = 5\r\n}\r\n\r\n// Recommendation Types\r\nexport interface BuddyMatchRecommendation {\r\n  buddyId: string;\r\n  buddyName: string;\r\n  title: string;\r\n  unit: string;\r\n  location: string;\r\n  compatibilityScore: number;\r\n  currentActiveBuddies: number;\r\n  maxActiveBuddies: number;\r\n  canAcceptNewBuddy: boolean;\r\n  matchingTechStack: string[];\r\n  matchingInterests: string[];\r\n  reasonForRecommendation: string;\r\n}\r\n\r\n// Gamification Types\r\nexport interface BuddyGameProfile {\r\n  id: string;\r\n  buddyProfileId: string;\r\n  totalPoints: number;\r\n  monthlyPoints: number;\r\n  currentLevel: BuddyLevel;\r\n  streakDays: number;\r\n  lastActivityDate: string;\r\n  pointsToNextLevel: number;\r\n  levelProgress: number;\r\n  badges: Badge[];\r\n  achievements: Achievement[];\r\n}\r\n\r\nexport enum BuddyLevel {\r\n  Bronze = 1,\r\n  Silver = 2,\r\n  Gold = 3,\r\n  Platinum = 4,\r\n  Diamond = 5\r\n}\r\n\r\nexport interface Badge {\r\n  id: string;\r\n  gameProfileId: string;\r\n  name: string;\r\n  description: string;\r\n  category: BadgeCategory;\r\n  iconUrl: string;\r\n  pointValue: number;\r\n  earnedDate: string;\r\n}\r\n\r\nexport enum BadgeCategory {\r\n  Mentorship = 1,\r\n  Expertise = 2,\r\n  Special = 3,\r\n  Achievement = 4\r\n}\r\n\r\nexport interface Achievement {\r\n  id: string;\r\n  gameProfileId: string;\r\n  activityType: AchievementType;\r\n  pointsAwarded: number;\r\n  multiplier: number;\r\n  relatedMatchId?: string;\r\n  description: string;\r\n  earnedDate: string;\r\n}\r\n\r\nexport enum AchievementType {\r\n  ProfileComplete = 1,\r\n  MatchAccept = 2,\r\n  FirstWeekCheckIn = 3,\r\n  MonthlyFeedback = 4,\r\n  FiveStarRating = 5,\r\n  ThreeMonthRelationship = 6,\r\n  SuccessfulCompletion = 7,\r\n  CrossTeamMentoring = 8,\r\n  HighPriorityMatch = 9,\r\n  PerfectMonth = 10\r\n}\r\n\r\n// Message Types\r\nexport interface Message {\r\n  id: string;\r\n  matchId: string;\r\n  senderId: string;\r\n  receiverId: string;\r\n  content: string;\r\n  type: MessageType;\r\n  isRead: boolean;\r\n  createdAt: string;\r\n  readAt?: string;\r\n  sender: Employee;\r\n  receiver: Employee;\r\n}\r\n\r\nexport enum MessageType {\r\n  Text = 1,\r\n  MeetingScheduled = 2,\r\n  SystemNotification = 3\r\n}\r\n\r\n// Feedback Types\r\nexport interface MatchFeedback {\r\n  id: string;\r\n  matchId: string;\r\n  providedById: string;\r\n  overallRating: number;\r\n  communicationRating: number;\r\n  helpfulnessRating: number;\r\n  cultureIntegrationRating: number;\r\n  comments: string;\r\n  improvements: string;\r\n  wouldRecommend: boolean;\r\n  createdAt: string;\r\n  averageRating: number;\r\n  isPositiveFeedback: boolean;\r\n  isExcellentFeedback: boolean;\r\n}\r\n\r\n// API Request Types\r\nexport interface CreateEmployeeRequest {\r\n  firstName: string;\r\n  lastName: string;\r\n  email: string;\r\n  title: string;\r\n  unit: string;\r\n  team: string;\r\n  location: string;\r\n  startDate: string;\r\n  role: EmployeeRole;\r\n  techStack?: string;\r\n  languages?: string;\r\n  interests?: string;\r\n}\r\n\r\nexport interface CreateBuddyProfileRequest {\r\n  maxActiveBuddies: number;\r\n  bio?: string;\r\n  specialties?: string;\r\n}\r\n\r\nexport interface CreateMatchRequest {\r\n  buddyId: string;\r\n  newcomerId: string;\r\n  hrId: string;\r\n  notes?: string;\r\n}\r\n\r\n// UI State Types\r\nexport interface UserContext {\r\n  currentUser: Employee | null;\r\n  setCurrentUser: (user: Employee | null) => void;\r\n  isLoading: boolean;\r\n  setIsLoading: (loading: boolean) => void;\r\n}\r\n\r\nexport interface NotificationState {\r\n  id: string;\r\n  type: 'success' | 'error' | 'warning' | 'info';\r\n  title: string;\r\n  message: string;\r\n  duration?: number;\r\n}\r\n\r\n// Analytics Types\r\nexport interface AnalyticsData {\r\n  totalEmployees: number;\r\n  totalBuddies: number;\r\n  totalNewcomers: number;\r\n  activeMatches: number;\r\n  pendingMatches: number;\r\n  completedMatches: number;\r\n  averageCompatibilityScore: number;\r\n  topPerformingBuddies: Employee[];\r\n  matchingTrends: MatchingTrend[];\r\n  departmentStats: DepartmentStat[];\r\n}\r\n\r\nexport interface MatchingTrend {\r\n  date: string;\r\n  matches: number;\r\n  acceptanceRate: number;\r\n}\r\n\r\nexport interface DepartmentStat {\r\n  department: string;\r\n  buddyCount: number;\r\n  newcomerCount: number;\r\n  matchingRate: number;\r\n}\r\n\r\n// Buddy Profile Request Types\r\nexport interface CreateBuddyProfileRequest {\r\n  bio: string;\r\n  specialties: string;\r\n  availability: BuddyAvailability;\r\n  maxActiveBuddies: number;\r\n  isActive: boolean;\r\n}\r\n\r\nexport interface UpdateBuddyProfileRequest {\r\n  bio?: string;\r\n  specialties?: string;\r\n  availability?: BuddyAvailability;\r\n  maxActiveBuddies?: number;\r\n  isActive?: boolean;\r\n}\r\n"],"mappings":"AAAA;;AAuBA,WAAYA,YAAY,0BAAZA,YAAY;EAAZA,YAAY,CAAZA,YAAY;EAAZA,YAAY,CAAZA,YAAY;EAAA,OAAZA,YAAY;AAAA;;AAKxB;AACA,WAAYC,iBAAiB,0BAAjBA,iBAAiB;EAAjBA,iBAAiB,CAAjBA,iBAAiB;EAAjBA,iBAAiB,CAAjBA,iBAAiB;EAAjBA,iBAAiB,CAAjBA,iBAAiB;EAAjBA,iBAAiB,CAAjBA,iBAAiB;EAAA,OAAjBA,iBAAiB;AAAA;;AAwB7B;;AAmBA,WAAYC,WAAW,0BAAXA,WAAW;EAAXA,WAAW,CAAXA,WAAW;EAAXA,WAAW,CAAXA,WAAW;EAAXA,WAAW,CAAXA,WAAW;EAAXA,WAAW,CAAXA,WAAW;EAAXA,WAAW,CAAXA,WAAW;EAAA,OAAXA,WAAW;AAAA;;AAQvB;;AAgBA;;AAeA,WAAYC,UAAU,0BAAVA,UAAU;EAAVA,UAAU,CAAVA,UAAU;EAAVA,UAAU,CAAVA,UAAU;EAAVA,UAAU,CAAVA,UAAU;EAAVA,UAAU,CAAVA,UAAU;EAAVA,UAAU,CAAVA,UAAU;EAAA,OAAVA,UAAU;AAAA;AAmBtB,WAAYC,aAAa,0BAAbA,aAAa;EAAbA,aAAa,CAAbA,aAAa;EAAbA,aAAa,CAAbA,aAAa;EAAbA,aAAa,CAAbA,aAAa;EAAbA,aAAa,CAAbA,aAAa;EAAA,OAAbA,aAAa;AAAA;AAkBzB,WAAYC,eAAe,0BAAfA,eAAe;EAAfA,eAAe,CAAfA,eAAe;EAAfA,eAAe,CAAfA,eAAe;EAAfA,eAAe,CAAfA,eAAe;EAAfA,eAAe,CAAfA,eAAe;EAAfA,eAAe,CAAfA,eAAe;EAAfA,eAAe,CAAfA,eAAe;EAAfA,eAAe,CAAfA,eAAe;EAAfA,eAAe,CAAfA,eAAe;EAAfA,eAAe,CAAfA,eAAe;EAAfA,eAAe,CAAfA,eAAe;EAAA,OAAfA,eAAe;AAAA;;AAa3B;;AAeA,WAAYC,WAAW,0BAAXA,WAAW;EAAXA,WAAW,CAAXA,WAAW;EAAXA,WAAW,CAAXA,WAAW;EAAXA,WAAW,CAAXA,WAAW;EAAA,OAAXA,WAAW;AAAA;;AAMvB;;AAkBA;;AA6BA;;AAgBA;;AA2BA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}